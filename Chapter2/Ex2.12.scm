(define (make-center-percent center percent)
  (make-interval (- center (* center (/ percent 100.0)))
				 (+ center (* center (/ percent 100.0)))))

(define (center interval)
  (average (lower-bound interval)
		   (upper-bound interval)))
(define (average a b) (/ (+ a b) 2.0))

(define (percent interval)
  (* (- (/ (upper-bound interval) (center interval))
		1.0)
	 100.0))

 ;;; Implementation of interval abstraction
 (define (make-interval lower upper)
   (cons lower upper))

 (define (lower-bound interval)
   (car interval))

 (define (upper-bound interval)
   (cdr interval))



















































































































































































































































































































































































































































































































(require racket/trace)
; ;;; Use substitution to evaluate (add-1 zero)
(define zero
  (lambda (f)
	(lambda (x) x)))

(define test
  (lambda (x) x))
(display (test 10)) (display "\n")
(define test2
  (lambda (f) (test 20)))
(display (test2 30)) (display "\n")
(display ((zero 40) 50)) (display "\n")

(define (add-1 n)
  (lambda (f)
	(lambda (x)
	  (f ((n f) x)))))

; (lambda (f) (lambda (x) (f ((lambda (f) (lambda (x) x)) f) x)))

;
;(define zero
;	(lambda (f) (
;		lambda (x) x
;	))
;)
;
;(define (add-1 n)
;	(lambda (f) (
;		lambda (x) (
;			f ((n f) x)
;		)
;	))
;)

(display "\n")
