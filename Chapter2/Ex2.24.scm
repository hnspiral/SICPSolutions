;;; Result printed by the interpreter to evaluate the expression:
(list 1 (list 2 (list 3 4)))
;Value 14: (1 (2 (3 4)))

;;; Corresponding Box and pointer structure of such expression:
;;; [*] [*]-> [*] [/]
;;;  |         |
;;;  V         V
;;; [1]       [*] [*] -> [*] [/]
;;;            |          |
;;;            V          V
;;;           [2]        [*] [*] -> [*] [/]
;;;                       |          |
;;;                       V          V
;;;                      [3]        [4]























































































































































































































































































































































































































































(require racket/trace)
; ;;; Use substitution to evaluate (add-1 zero)
(define zero
  (lambda (f)
	(lambda (x) x)))

(define test
  (lambda (x) x))
(display (test 10)) (display "\n")
(define test2
  (lambda (f) (test 20)))
(display (test2 30)) (display "\n")
(display ((zero 40) 50)) (display "\n")

(define (add-1 n)
  (lambda (f)
	(lambda (x)
	  (f ((n f) x)))))

; (lambda (f) (lambda (x) (f ((lambda (f) (lambda (x) x)) f) x)))

;
;(define zero
;	(lambda (f) (
;		lambda (x) x
;	))
;)
;
;(define (add-1 n)
;	(lambda (f) (
;		lambda (x) (
;			f ((n f) x)
;		)
;	))
;)

(display "\n")
